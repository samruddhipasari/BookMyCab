/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Uber.Car;
import Uber.CarInfo;
import java.awt.CardLayout;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Samruddhi
 */
public class ViewCarJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewCarJPanel
     */
    private CarInfo carInfo;
    private JPanel rightPanel;
    private DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-dd-yyyy HH:mm:ss");
    public ViewCarJPanel(JPanel rightPanel, CarInfo carInfo) {
        initComponents();
        this.rightPanel = rightPanel;
        this.carInfo = carInfo;
        lastUpdateTextField.setText(carInfo.getLastUpdate().format(formatter));
        populateTable();
    }
    
    private void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel)tblCarDetails.getModel();
        dtm.setRowCount(0);
        
        for(Car car: carInfo.getCarInfo()){
            Object[] row = new Object[4];
            row[0] = car;
            row[1] = car.getCity();
            row[2] = car.getYear_manufactured();
            if(car.isAvailable()) row[3] = "yes";
            else row[3] = "no";
            
            dtm.addRow(row);
        }
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manuTextField = new javax.swing.JTextField();
        serialNumLable = new javax.swing.JLabel();
        manCertLable = new javax.swing.JLabel();
        modelNumLable = new javax.swing.JLabel();
        cityTextField = new javax.swing.JTextField();
        modelNumTextField = new javax.swing.JTextField();
        serialNumTextField = new javax.swing.JTextField();
        manuYearTextField = new javax.swing.JTextField();
        minSeatsLable = new javax.swing.JLabel();
        cityLable = new javax.swing.JLabel();
        maxSeatsTextField = new javax.swing.JTextField();
        availLable = new javax.swing.JLabel();
        createLable = new javax.swing.JLabel();
        maxSeatsLable = new javax.swing.JLabel();
        minSeatsTextField = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        manuLable = new javax.swing.JLabel();
        modelLable = new javax.swing.JLabel();
        availCheckBox = new javax.swing.JCheckBox();
        manCertValidCheckBox = new javax.swing.JCheckBox();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCarDetails = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        lastUpdateLabel = new javax.swing.JLabel();
        lastUpdateTextField = new javax.swing.JTextField();

        manuTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        manuTextField.setEnabled(false);

        serialNumLable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        serialNumLable.setText("Serial Number:");

        manCertLable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        manCertLable.setText("Valid Maintenance Certificate:");

        modelNumLable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        modelNumLable.setText("Model Number:");

        cityTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cityTextField.setEnabled(false);

        modelNumTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        modelNumTextField.setEnabled(false);

        serialNumTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        serialNumTextField.setEnabled(false);

        manuYearTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        manuYearTextField.setEnabled(false);

        minSeatsLable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        minSeatsLable.setText("Minimum Number of Seats:");

        cityLable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cityLable.setText("City of Availability:");

        maxSeatsTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        maxSeatsTextField.setEnabled(false);

        availLable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        availLable.setText("Availability:");

        createLable.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        createLable.setText("View Car Details");

        maxSeatsLable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        maxSeatsLable.setText("Maximum Number of Seats:");

        minSeatsTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        minSeatsTextField.setEnabled(false);

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        manuLable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        manuLable.setText("Manufacturer:");

        modelLable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        modelLable.setText("Year of Manufacture:");

        availCheckBox.setEnabled(false);
        availCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availCheckBoxActionPerformed(evt);
            }
        });

        manCertValidCheckBox.setEnabled(false);

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblCarDetails.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblCarDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Manufacturer", "City", "Year of Manufacture", "Available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCarDetails);

        btnView.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnConfirm.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnConfirm.setText("Confirm");
        btnConfirm.setEnabled(false);
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        lastUpdateLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lastUpdateLabel.setText("Last Catalog Update time:");

        lastUpdateTextField.setEditable(false);
        lastUpdateTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(150, 150, 150)
                        .addComponent(createLable)
                        .addGap(116, 116, 116)
                        .addComponent(lastUpdateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lastUpdateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(47, 47, 47)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(availLable)
                                        .addComponent(maxSeatsLable)
                                        .addComponent(minSeatsLable)
                                        .addComponent(cityLable)
                                        .addComponent(modelLable)
                                        .addComponent(manuLable)
                                        .addComponent(manCertLable)
                                        .addComponent(serialNumLable)
                                        .addComponent(modelNumLable))
                                    .addGap(53, 53, 53)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(manuYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(serialNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(manuTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(modelNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(maxSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(minSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(availCheckBox)
                                                .addComponent(manCertValidCheckBox))
                                            .addGap(108, 108, 108)
                                            .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(createLable)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lastUpdateLabel)
                        .addComponent(lastUpdateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnView))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(availLable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(manCertLable))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(availCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(manCertValidCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(manuTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(manuLable))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(manuYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modelLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(serialNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serialNumLable))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modelNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modelNumLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cityLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minSeatsLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxSeatsLable))
                        .addGap(34, 34, 34)
                        .addComponent(btnConfirm)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setFieldEnabled(boolean b){
        
        manuTextField.setEnabled(b);
        manuYearTextField.setEnabled(b);
        serialNumTextField.setEnabled(b);
        modelNumTextField.setEnabled(b);
        cityTextField.setEnabled(b);
        minSeatsTextField.setEnabled(b);
        maxSeatsTextField.setEnabled(b);
        availCheckBox.setEnabled(b);
        manCertValidCheckBox.setEnabled(b);
    }
     
    private void clearField(boolean b){
        if(b == true){
            manuTextField.setText("");
            manuYearTextField.setText("");
            serialNumTextField.setText("");
            modelNumTextField.setText("");
            cityTextField.setText("");
            maxSeatsTextField.setText("");
            minSeatsTextField.setText("");
            availCheckBox.setSelected(false);
            manCertValidCheckBox.setSelected(false);
        }
    }
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        int selectRow = tblCarDetails.getSelectedRow();
        
        if (selectRow >= 0){
            setFieldEnabled(true);
            btnConfirm.setEnabled(true);
            Car car = (Car)tblCarDetails.getValueAt(selectRow, 0);
            manuTextField.setText(car.getManufacturer());
            manuYearTextField.setText(String.valueOf(car.getYear_manufactured()));
            serialNumTextField.setText(String.valueOf(car.getSerialNum()));
            modelNumTextField.setText(String.valueOf(car.getModelNum()));
            cityTextField.setText(car.getCity());
            minSeatsTextField.setText(String.valueOf(car.getMinSeats()));
            maxSeatsTextField.setText(String.valueOf(car.getMaxSeats()));
            availCheckBox.setSelected(car.isAvailable());
            manCertValidCheckBox.setSelected(car.isMaintenanceCretValid());
        }
        else
            JOptionPane.showMessageDialog(null, "No Row to Update", "Error", JOptionPane.ERROR_MESSAGE);
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void availCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availCheckBoxActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.rightPanel.remove(this);
        CardLayout layout = (CardLayout)this.rightPanel.getLayout();
        layout.previous(rightPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        setFieldEnabled(false);
        btnConfirm.setEnabled(false);
        int selectRow = tblCarDetails.getSelectedRow();
        
        if (selectRow >= 0){
            Car car = (Car)tblCarDetails.getValueAt(selectRow, 0);
            manuTextField.setText(car.getManufacturer());
            manuYearTextField.setText(String.valueOf(car.getYear_manufactured()));
            serialNumTextField.setText(String.valueOf(car.getSerialNum()));
            modelNumTextField.setText(String.valueOf(car.getModelNum()));
            cityTextField.setText(car.getCity());
            minSeatsTextField.setText(String.valueOf(car.getMinSeats()));
            maxSeatsTextField.setText(String.valueOf(car.getMaxSeats()));
            availCheckBox.setSelected(car.isAvailable());
            manCertValidCheckBox.setSelected(car.isMaintenanceCretValid());
        }
        else
            JOptionPane.showMessageDialog(null, "No Row to view", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectRow = tblCarDetails.getSelectedRow();
        
        if(selectRow>=0){
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to Delete this Car Details?", "Warning", dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
                Car car = (Car) tblCarDetails.getValueAt(selectRow, 0);
                carInfo.deleteCar(car);
                populateTable();
                JOptionPane.showMessageDialog(null, "Car is successfully Deleted");
                clearField(true);
            }
        }
        else
            JOptionPane.showMessageDialog(null, "Please Select a Row from the Table", "Error", JOptionPane.ERROR_MESSAGE);

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        // TODO add your handling code here:
        int selectRow = tblCarDetails.getSelectedRow();
        if(selectRow>=0){
            Car car = (Car)tblCarDetails.getValueAt(selectRow, 0);
            String manu = manuTextField.getText();
            int year = Integer.parseInt(manuYearTextField.getText());
            String city = cityTextField.getText();
            int serial = Integer.parseInt(serialNumTextField.getText());
            int model = Integer.parseInt(modelNumTextField.getText());
            int minSeats = Integer.parseInt(minSeatsTextField.getText());
            int maxSeats = Integer.parseInt(maxSeatsTextField.getText());
            boolean avail = availCheckBox.isSelected();
            boolean manCert = manCertValidCheckBox.isSelected();
            car.setManufacturer(manu);
            car.setYear_manufactured(year);
            car.setCity(city);
            car.setSerialNum(serial);
            car.setModelNum(model);
            car.setMinSeats(minSeats);
            car.setMaxSeats(maxSeats);
            car.setAvailable(avail);
            car.setMaintenanceCretValid(manCert);
            carInfo.setLastUpdate();
            populateTable();
            
            JOptionPane.showMessageDialog(null, "Car is successfully updated");
            lastUpdateTextField.setText(carInfo.getLastUpdate().format(formatter));
            btnConfirm.setEnabled(false);
            clearField(true);
            setFieldEnabled(false);
        }
        else
            JOptionPane.showMessageDialog(null, "Please Select a Row ", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnConfirmActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox availCheckBox;
    private javax.swing.JLabel availLable;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel cityLable;
    private javax.swing.JTextField cityTextField;
    private javax.swing.JLabel createLable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lastUpdateLabel;
    private javax.swing.JTextField lastUpdateTextField;
    private javax.swing.JLabel manCertLable;
    private javax.swing.JCheckBox manCertValidCheckBox;
    private javax.swing.JLabel manuLable;
    private javax.swing.JTextField manuTextField;
    private javax.swing.JTextField manuYearTextField;
    private javax.swing.JLabel maxSeatsLable;
    private javax.swing.JTextField maxSeatsTextField;
    private javax.swing.JLabel minSeatsLable;
    private javax.swing.JTextField minSeatsTextField;
    private javax.swing.JLabel modelLable;
    private javax.swing.JLabel modelNumLable;
    private javax.swing.JTextField modelNumTextField;
    private javax.swing.JLabel serialNumLable;
    private javax.swing.JTextField serialNumTextField;
    private javax.swing.JTable tblCarDetails;
    // End of variables declaration//GEN-END:variables
}
